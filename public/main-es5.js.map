{"version":3,"sources":["webpack:///src/app/heating-control/heating-control.component.ts","webpack:///src/app/heating-control/heating-control.component.html","webpack:///src/environments/environment.ts","webpack:///src/app/server-status/server-status.guard.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/server-status/server-status.component.ts","webpack:///src/app/server-status/server-status.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/server-status/server-status.service.ts","webpack:///src/app/app-routing.module.ts","webpack:///src/app/heating-control/temperature.pipe.ts","webpack:///src/main.ts","webpack:///$_lazy_route_resource lazy namespace object"],"names":["$event","stopPropagation","HeatingControlComponent","http","displayedColumns","rooms","sliderValue","selection","isSliderDisabled","initRooms","room","clear","select","find","r","name","temperature","event","selected","value","inSync","post","subscribe","roomState","hasError","devices","some","device","errorMsg","undefined","getMaxTemperature","index","get","pipe","map","getRoomState","mode","lowBattery","hasLowBattery","reduce","acc","sliderChanged","templateUrl","styleUrls","environment","production","ServerStatusGuard","serverStatusService","router","next","state","fetchServerStatus","isRunning","navigate","AppComponent","selector","ServerStatusComponent","inProgress","then","route","checked","serverStatus","toggleState","AppModule","declarations","imports","providers","bootstrap","ServerStatusService","toPromise","routes","path","component","canActivate","AppRoutingModule","forRoot","useHash","exports","TemperaturePipe","bootstrapModule","err","console","error","webpackEmptyAsyncContext","req","Promise","resolve","e","Error","code","keys","module","id"],"mappings":"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","file":"main-es5.js","sourcesContent":["import { Component } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { IRoomState, IRoomVM, IDeviceErrorState, IDeviceState } from './heating-control.model';\nimport { tap, switchMap } from 'rxjs/operators';\nimport { Observable, merge } from 'rxjs';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport { MatSliderChange } from '@angular/material/slider';\n\n\n@Component({\n  templateUrl: './heating-control.component.html',\n  styleUrls: ['./heating-control.component.scss']\n})\nexport class HeatingControlComponent {\n  displayedColumns: string[] = ['selection', 'name', 'temperature', 'action'];\n  rooms: IRoomVM[] = [];\n  sliderValue = 0;\n  selection = new SelectionModel<IRoomVM>(true, []);\n  isSliderDisabled = true;\n\n  constructor(private http: HttpClient) {\n    this.initRooms();\n  }\n\n  changeSelection(room: IRoomVM): void {\n    this.selection.clear()\n    this.selection.select(room);\n    this.isSliderDisabled = false;\n    this.sliderValue = this.rooms.find((r: IRoomVM) => r.name === room.name)?.temperature || 0;\n  }\n\n  sliderChanged(event: MatSliderChange): void {\n    const name: string = this.selection.selected[0].name;\n    const temperature: number = event.value as number;\n    const room = this.rooms.find((room: IRoomVM) => room.name === name) as IRoomVM;\n\n    room.inSync = false;\n    \n    this.http.post<IRoomState>('heating-control/set-temp', { name, temperature }).subscribe((roomState: IRoomState) => {\n      const room = this.rooms.find((room: IRoomVM) => roomState.name === room.name) as IRoomVM;\n      const hasError = roomState.devices.some((device: any) => device.errorMsg);\n\n      room.temperature = hasError ? undefined : this.getMaxTemperature(roomState.devices);\n      room.inSync = true;\n    });\n  }\n\n  trackByName(index: number, room: IRoomVM): string {\n    return room.name;\n  }\n\n  setEcoMode(event: Event, name: string): void {\n    const room = this.rooms.find((room: IRoomVM) => room.name === name) as IRoomVM;\n\n    room.inSync = false;\n    \n    this.http.post<IRoomState>('heating-control/set-eco', { name }).subscribe((roomState: IRoomState) => {\n      const room = this.rooms.find((room: IRoomVM) => roomState.name === room.name) as IRoomVM;\n      const hasError = roomState.devices.some((device: any) => device.errorMsg);\n\n      room.temperature = hasError ? undefined : this.getMaxTemperature(roomState.devices);\n      room.inSync = true;\n    });\n    event.stopPropagation();\n  }\n\n  setComfortMode(event: Event, name: string): void {\n    const room = this.rooms.find((room: IRoomVM) => room.name === name) as IRoomVM;\n\n    room.inSync = false;\n    \n    this.http.post<IRoomState>('heating-control/set-comfort', { name }).subscribe((roomState: IRoomState) => {\n      const room = this.rooms.find((room: IRoomVM) => roomState.name === room.name) as IRoomVM;\n      const hasError = roomState.devices.some((device: any) => device.errorMsg);\n\n      room.temperature = hasError ? undefined : this.getMaxTemperature(roomState.devices);\n      room.inSync = true;\n    });\n    event.stopPropagation();\n  }\n\n  setOff(event: Event, name: string): void {\n    const room = this.rooms.find((room: IRoomVM) => room.name === name) as IRoomVM;\n\n    room.inSync = false;\n    \n    this.http.post<IRoomState>('heating-control/set-off', { name }).subscribe((roomState: IRoomState) => {\n      const room = this.rooms.find((room: IRoomVM) => roomState.name === room.name) as IRoomVM;\n      const hasError = roomState.devices.some((device: any) => device.errorMsg);\n\n      room.temperature = hasError ? undefined : this.getMaxTemperature(roomState.devices);\n      room.inSync = true;\n    });\n    event.stopPropagation();\n  }\n\n  private initRooms(): void {\n    this.http.get<string[]>('heating-control/rooms').pipe(\n      tap((rooms: string[]) => this.rooms = rooms.map((name: string) => ({name}))),\n      switchMap((rooms: string[]) => merge(...rooms.map((room: string) => this.getRoomState(room))))\n    ).subscribe((roomState: IRoomState) => {\n      const room = this.rooms.find((room: IRoomVM) => roomState.name === room.name) as IRoomVM;\n      const hasError = roomState.devices.some((device: any) => device.errorMsg);\n\n      room.mode = roomState.mode;\n      room.temperature = hasError ? undefined : this.getMaxTemperature(roomState.devices);\n      room.lowBattery = this.hasLowBattery(roomState.devices);\n      room.inSync = true;\n    });\n  }\n\n  private getRoomState(name: string): Observable<IRoomState> {\n    return this.http.get<IRoomState>(`heating-control/rooms?name=${name}`);\n  }\n\n  private getMaxTemperature(devices: (IDeviceState | IDeviceErrorState)[]): number {\n    return devices.reduce((acc: number, device: any) => {\n      const temperature = device.temperature || 0;\n\n      return temperature > acc ? temperature : acc;\n    }, 0);\n  }\n\n  private hasLowBattery(devices: (IDeviceState | IDeviceErrorState)[]): boolean {\n    return devices.some((device: any) => {\n      return device.lowBattery ?? false;\n    });\n  }\n}\n","<table mat-table [dataSource]=\"rooms\" [trackBy]=\"trackByName\">\n  <ng-container matColumnDef=\"selection\">\n    <th mat-header-cell *matHeaderCellDef></th>\n    <td mat-cell *matCellDef=\"let row\" class=\"select-column\">\n      <mat-radio-button (click)=\"$event.stopPropagation()\"\n        (change)=\"changeSelection(row)\"\n        [checked]=\"selection.isSelected(row)\">\n      </mat-radio-button>\n    </td>\n  </ng-container>\n  <ng-container matColumnDef=\"name\">\n    <th mat-header-cell *matHeaderCellDef> Name</th>\n    <td mat-cell *matCellDef=\"let element\"> \n      {{element.name}}\n    </td>\n  </ng-container>\n  <ng-container matColumnDef=\"temperature\">\n    <th mat-header-cell *matHeaderCellDef> Temperature</th>\n    <td mat-cell *matCellDef=\"let element\"> \n      {{element.temperature | temperature}} \n      <mat-spinner *ngIf=\"!element.inSync\" [diameter]=\"18\"></mat-spinner>\n      <mat-icon *ngIf=\"element.lowBattery\" class=\"low-battery\">battery_alert</mat-icon>\n    </td>\n  </ng-container>\n  <ng-container matColumnDef=\"action\">\n    <th mat-header-cell *matHeaderCellDef></th>\n    <td mat-cell *matCellDef=\"let element\" class=\"action-column\">\n      <div class=\"action-icons\">\n        <button mat-icon-button color=\"primary\" (click)=\"setEcoMode($event, element.name)\">\n          <mat-icon>eco</mat-icon>\n        </button>\n        <button mat-icon-button color=\"primary\" (click)=\"setComfortMode($event, element.name)\">\n          <mat-icon>wb_sunny</mat-icon>\n        </button>\n        <button mat-icon-button color=\"primary\" (click)=\"setOff($event, element.name)\">\n          <mat-icon>exposure_zero</mat-icon>\n        </button>\n      </div>\n    </td>\n  </ng-container>\n  <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n  <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"\n    (click)=\"changeSelection(row)\">\n  </tr>\n</table>\n\n<div class=\"temperature-form\">\n  <mat-slider min=\"0\" max=\"25\" step=\"0.5\" [(ngModel)]=\"sliderValue\" thumbLabel=\"true\" [disabled]=\"isSliderDisabled\"\n    (change)=\"sliderChanged($event)\">\n  </mat-slider>\n</div>","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Injectable } from \"@angular/core\";\nimport { CanActivate, Router, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { ServerStatusService } from './server-status.service';\n\n@Injectable()\nexport class ServerStatusGuard implements CanActivate {\n    constructor(\n        private serverStatusService: ServerStatusService,\n        private router: Router\n    ) {}\n\n    async canActivate(next: ActivatedRouteSnapshot, state: RouterStateSnapshot): Promise<boolean> {\n        const isRunning: boolean = await this.serverStatusService.fetchServerStatus();\n        \n        if (!isRunning) {\n            this.router.navigate([\"/\"]);\n            return false;\n        }\n\n        return true;\n    }\n    \n}","import { Component } from \"@angular/core\";\nimport { ServerStatusService } from './server-status/server-status.service';\n\n@Component({\n    selector: \"app-root\",\n    templateUrl: \"./app.component.html\",\n    styleUrls: [\"./app.component.scss\"]\n})\nexport class AppComponent {\n    constructor(private serverStatusService: ServerStatusService) {\n        //this.serverStatusService.fetchServerStatus().then();\n    }\n}\n","<mat-toolbar>\n    <button mat-icon-button (click)=\"drawer.toggle()\">\n        <mat-icon>menu</mat-icon>\n      </button>\n      <span>Home App</span>\n</mat-toolbar>\n<mat-drawer-container hasBackdrop=\"true\">\n    <mat-drawer #drawer>\n        <mat-list>\n            <mat-list-item>\n                <a mat-button routerLink=\"/\" (click)=\"drawer.close()\">Status</a>\n            </mat-list-item>\n            <mat-list-item>\n                <a mat-button routerLink=\"/heating-control\" (click)=\"drawer.close()\">Heating</a>\n            </mat-list-item>\n        </mat-list>\n    </mat-drawer>\n    <div class=\"content\">\n        <router-outlet></router-outlet>\n    </div>\n</mat-drawer-container>","import { Component } from \"@angular/core\";\nimport { ServerStatusService } from './server-status.service';\nimport { MatSlideToggleChange } from '@angular/material/slide-toggle';\nimport { HttpClient } from '@angular/common/http';\nimport { IServerStatus } from './server-status.model';\n\n@Component({\n    templateUrl: \"./server-status.component.html\",\n    styleUrls: [\"./server-status.component.scss\"]\n})\nexport class ServerStatusComponent {\n\n    isRunning = false;\n    inProgress = true;\n\n    constructor(\n        private serverStatusService: ServerStatusService,\n        private http: HttpClient\n    ) {\n\n        this.serverStatusService.fetchServerStatus().then((isRunning: boolean) => {\n            this.isRunning = isRunning;\n            this.inProgress = false;\n        });\n    }\n\n    toggleState(event: MatSlideToggleChange): void {\n        const route: string = event.checked ? \"startup\" : \"shutdown\";\n\n        this.inProgress = true;\n        this.http.get<IServerStatus>(route).subscribe((serverStatus: IServerStatus) => {\n            this.isRunning = serverStatus.isRunning;\n            this.inProgress = false;\n        });\n    }\n}","<div class=\"content-container\">\n    <mat-slide-toggle [checked]=\"isRunning\" \n        [disabled]=\"inProgress\"\n        (change)=\"toggleState($event)\">Iris</mat-slide-toggle>\n    <mat-spinner *ngIf=\"inProgress\" [diameter]=\"18\"></mat-spinner>\n</div>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { MatTableModule } from '@angular/material/table';\nimport { AppRoutingModule } from './app-routing.module';\nimport { HeatingControlComponent } from './heating-control/heating-control.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatSliderModule} from '@angular/material/slider';\nimport { FormsModule } from '@angular/forms';\nimport {MatRadioModule} from '@angular/material/radio';\nimport { TemperaturePipe } from './heating-control/temperature.pipe';\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\nimport { AppComponent } from './app.component';\nimport {MatToolbarModule} from '@angular/material/toolbar';\nimport {MatSidenavModule} from '@angular/material/sidenav';\nimport {MatListModule} from '@angular/material/list';\nimport { ServerStatusComponent } from './server-status/server-status.component';\nimport { ServerStatusService } from './server-status/server-status.service';\nimport { ServerStatusGuard } from './server-status/server-status.guard';\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    HeatingControlComponent,\n    TemperaturePipe,\n    ServerStatusComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    MatTableModule,\n    MatIconModule,\n    MatButtonModule,\n    MatSliderModule,\n    MatRadioModule,\n    FormsModule,\n    MatProgressSpinnerModule,\n    MatToolbarModule,\n    MatSidenavModule,\n    MatListModule,\n    MatSlideToggleModule\n  ],\n  providers: [ServerStatusService, ServerStatusGuard],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from \"@angular/core\";\nimport { HttpClient } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport { IServerStatus } from './server-status.model';\n\n@Injectable()\nexport class ServerStatusService {\n    isRunning = false;\n\n    constructor(private http: HttpClient) {}\n\n    fetchServerStatus(): Promise<boolean> {\n        return this.http.get<IServerStatus>(\"status\").pipe(\n            map((serverStatus: IServerStatus) => this.isRunning = serverStatus.isRunning)\n        ).toPromise();\n    }\n}","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { HeatingControlComponent } from './heating-control/heating-control.component';\nimport { ServerStatusComponent } from './server-status/server-status.component';\nimport { ServerStatusGuard } from './server-status/server-status.guard';\n\nconst routes: Routes = [\n  { \n    path: 'heating-control', \n    component: HeatingControlComponent, \n    canActivate: [\n      ServerStatusGuard\n    ]\n  },\n  { path: '**', component: ServerStatusComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes, { useHash: true })],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({name: 'temperature'})\nexport class TemperaturePipe implements PipeTransform {\n  transform(value: number|undefined): string {\n    if (value === undefined) {\n        return \"-\";\n    } else if (value === 4.5) {\n        return \"OFF\"\n    } else {\n        return `${value} °C`;\n    }\n  }\n}","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"]}