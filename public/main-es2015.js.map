{"version":3,"sources":["./src/app/heating-control/heating-control.component.ts","./src/app/heating-control/heating-control.component.html","./src/environments/environment.ts","./src/app/server-status/server-status.guard.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/server-status/server-status.component.ts","./src/app/server-status/server-status.component.html","./src/app/app.module.ts","./src/app/server-status/server-status.service.ts","./src/app/app-routing.module.ts","./src/app/heating-control/temperature.pipe.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main-es2015.js","sourcesContent":["import { Component } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { IRoomState, IRoomVM, IDeviceErrorState, IDeviceState } from './heating-control.model';\nimport { tap, switchMap } from 'rxjs/operators';\nimport { Observable, merge } from 'rxjs';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport { MatSliderChange } from '@angular/material/slider';\n\n\n@Component({\n  templateUrl: './heating-control.component.html',\n  styleUrls: ['./heating-control.component.scss']\n})\nexport class HeatingControlComponent {\n  displayedColumns: string[] = ['selection', 'name', 'temperature', 'action'];\n  rooms: IRoomVM[] = [];\n  sliderValue = 0;\n  selection = new SelectionModel<IRoomVM>(true, []);\n  isSliderDisabled = true;\n\n  constructor(private http: HttpClient) {\n    this.initRooms();\n  }\n\n  changeSelection(room: IRoomVM): void {\n    this.selection.clear()\n    this.selection.select(room);\n    this.isSliderDisabled = false;\n    this.sliderValue = this.rooms.find((r: IRoomVM) => r.name === room.name)?.temperature || 0;\n  }\n\n  sliderChanged(event: MatSliderChange): void {\n    const name: string = this.selection.selected[0].name;\n    const temperature: number = event.value as number;\n    const room = this.rooms.find((room: IRoomVM) => room.name === name) as IRoomVM;\n\n    room.inSync = false;\n    \n    this.http.post<IRoomState>('heating-control/set-temp', { name, temperature }).subscribe((roomState: IRoomState) => {\n      const room = this.rooms.find((room: IRoomVM) => roomState.name === room.name) as IRoomVM;\n      const hasError = roomState.devices.some((device: any) => device.errorMsg);\n\n      room.temperature = hasError ? undefined : this.getMaxTemperature(roomState.devices);\n      room.inSync = true;\n    });\n  }\n\n  trackByName(index: number, room: IRoomVM): string {\n    return room.name;\n  }\n\n  setEcoMode(event: Event, name: string): void {\n    const room = this.rooms.find((room: IRoomVM) => room.name === name) as IRoomVM;\n\n    room.inSync = false;\n    \n    this.http.post<IRoomState>('heating-control/set-eco', { name }).subscribe((roomState: IRoomState) => {\n      const room = this.rooms.find((room: IRoomVM) => roomState.name === room.name) as IRoomVM;\n      const hasError = roomState.devices.some((device: any) => device.errorMsg);\n\n      room.temperature = hasError ? undefined : this.getMaxTemperature(roomState.devices);\n      room.inSync = true;\n    });\n    event.stopPropagation();\n  }\n\n  setComfortMode(event: Event, name: string): void {\n    const room = this.rooms.find((room: IRoomVM) => room.name === name) as IRoomVM;\n\n    room.inSync = false;\n    \n    this.http.post<IRoomState>('heating-control/set-comfort', { name }).subscribe((roomState: IRoomState) => {\n      const room = this.rooms.find((room: IRoomVM) => roomState.name === room.name) as IRoomVM;\n      const hasError = roomState.devices.some((device: any) => device.errorMsg);\n\n      room.temperature = hasError ? undefined : this.getMaxTemperature(roomState.devices);\n      room.inSync = true;\n    });\n    event.stopPropagation();\n  }\n\n  setOff(event: Event, name: string): void {\n    const room = this.rooms.find((room: IRoomVM) => room.name === name) as IRoomVM;\n\n    room.inSync = false;\n    \n    this.http.post<IRoomState>('heating-control/set-off', { name }).subscribe((roomState: IRoomState) => {\n      const room = this.rooms.find((room: IRoomVM) => roomState.name === room.name) as IRoomVM;\n      const hasError = roomState.devices.some((device: any) => device.errorMsg);\n\n      room.temperature = hasError ? undefined : this.getMaxTemperature(roomState.devices);\n      room.inSync = true;\n    });\n    event.stopPropagation();\n  }\n\n  private initRooms(): void {\n    this.http.get<string[]>('heating-control/rooms').pipe(\n      tap((rooms: string[]) => this.rooms = rooms.map((name: string) => ({name}))),\n      switchMap((rooms: string[]) => merge(...rooms.map((room: string) => this.getRoomState(room))))\n    ).subscribe((roomState: IRoomState) => {\n      const room = this.rooms.find((room: IRoomVM) => roomState.name === room.name) as IRoomVM;\n      const hasError = roomState.devices.some((device: any) => device.errorMsg);\n\n      room.mode = roomState.mode;\n      room.temperature = hasError ? undefined : this.getMaxTemperature(roomState.devices);\n      room.lowBattery = this.hasLowBattery(roomState.devices);\n      room.inSync = true;\n    });\n  }\n\n  private getRoomState(name: string): Observable<IRoomState> {\n    return this.http.get<IRoomState>(`heating-control/rooms?name=${name}`);\n  }\n\n  private getMaxTemperature(devices: (IDeviceState | IDeviceErrorState)[]): number {\n    return devices.reduce((acc: number, device: any) => {\n      const temperature = device.temperature || 0;\n\n      return temperature > acc ? temperature : acc;\n    }, 0);\n  }\n\n  private hasLowBattery(devices: (IDeviceState | IDeviceErrorState)[]): boolean {\n    return devices.some((device: any) => {\n      return device.lowBattery ?? false;\n    });\n  }\n}\n","<table mat-table [dataSource]=\"rooms\" [trackBy]=\"trackByName\">\n  <ng-container matColumnDef=\"selection\">\n    <th mat-header-cell *matHeaderCellDef></th>\n    <td mat-cell *matCellDef=\"let row\" class=\"select-column\">\n      <mat-radio-button (click)=\"$event.stopPropagation()\"\n        (change)=\"changeSelection(row)\"\n        [checked]=\"selection.isSelected(row)\">\n      </mat-radio-button>\n    </td>\n  </ng-container>\n  <ng-container matColumnDef=\"name\">\n    <th mat-header-cell *matHeaderCellDef> Name</th>\n    <td mat-cell *matCellDef=\"let element\"> \n      {{element.name}}\n    </td>\n  </ng-container>\n  <ng-container matColumnDef=\"temperature\">\n    <th mat-header-cell *matHeaderCellDef> Temperature</th>\n    <td mat-cell *matCellDef=\"let element\"> \n      {{element.temperature | temperature}} \n      <mat-spinner *ngIf=\"!element.inSync\" [diameter]=\"18\"></mat-spinner>\n      <mat-icon *ngIf=\"element.lowBattery\" class=\"low-battery\">battery_alert</mat-icon>\n    </td>\n  </ng-container>\n  <ng-container matColumnDef=\"action\">\n    <th mat-header-cell *matHeaderCellDef></th>\n    <td mat-cell *matCellDef=\"let element\" class=\"action-column\">\n      <div class=\"action-icons\">\n        <button mat-icon-button color=\"primary\" (click)=\"setEcoMode($event, element.name)\">\n          <mat-icon>eco</mat-icon>\n        </button>\n        <button mat-icon-button color=\"primary\" (click)=\"setComfortMode($event, element.name)\">\n          <mat-icon>wb_sunny</mat-icon>\n        </button>\n        <button mat-icon-button color=\"primary\" (click)=\"setOff($event, element.name)\">\n          <mat-icon>exposure_zero</mat-icon>\n        </button>\n      </div>\n    </td>\n  </ng-container>\n  <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n  <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"\n    (click)=\"changeSelection(row)\">\n  </tr>\n</table>\n\n<div class=\"temperature-form\">\n  <mat-slider min=\"0\" max=\"25\" step=\"0.5\" [(ngModel)]=\"sliderValue\" thumbLabel=\"true\" [disabled]=\"isSliderDisabled\"\n    (change)=\"sliderChanged($event)\">\n  </mat-slider>\n</div>","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Injectable } from \"@angular/core\";\nimport { CanActivate, Router, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { ServerStatusService } from './server-status.service';\n\n@Injectable()\nexport class ServerStatusGuard implements CanActivate {\n    constructor(\n        private serverStatusService: ServerStatusService,\n        private router: Router\n    ) {}\n\n    async canActivate(next: ActivatedRouteSnapshot, state: RouterStateSnapshot): Promise<boolean> {\n        const isRunning: boolean = await this.serverStatusService.fetchServerStatus();\n        \n        if (!isRunning) {\n            this.router.navigate([\"/\"]);\n            return false;\n        }\n\n        return true;\n    }\n    \n}","import { Component } from \"@angular/core\";\nimport { ServerStatusService } from './server-status/server-status.service';\n\n@Component({\n    selector: \"app-root\",\n    templateUrl: \"./app.component.html\",\n    styleUrls: [\"./app.component.scss\"]\n})\nexport class AppComponent {\n    constructor(private serverStatusService: ServerStatusService) {\n        //this.serverStatusService.fetchServerStatus().then();\n    }\n}\n","<mat-toolbar>\n    <button mat-icon-button (click)=\"drawer.toggle()\">\n        <mat-icon>menu</mat-icon>\n      </button>\n      <span>Home App</span>\n</mat-toolbar>\n<mat-drawer-container hasBackdrop=\"true\">\n    <mat-drawer #drawer>\n        <mat-list>\n            <mat-list-item>\n                <a mat-button routerLink=\"/\" (click)=\"drawer.close()\">Status</a>\n            </mat-list-item>\n            <mat-list-item>\n                <a mat-button routerLink=\"/heating-control\" (click)=\"drawer.close()\">Heating</a>\n            </mat-list-item>\n        </mat-list>\n    </mat-drawer>\n    <div class=\"content\">\n        <router-outlet></router-outlet>\n    </div>\n</mat-drawer-container>","import { Component } from \"@angular/core\";\nimport { ServerStatusService } from './server-status.service';\nimport { MatSlideToggleChange } from '@angular/material/slide-toggle';\nimport { HttpClient } from '@angular/common/http';\nimport { IServerStatus } from './server-status.model';\n\n@Component({\n    templateUrl: \"./server-status.component.html\",\n    styleUrls: [\"./server-status.component.scss\"]\n})\nexport class ServerStatusComponent {\n\n    isRunning = false;\n    inProgress = true;\n\n    constructor(\n        private serverStatusService: ServerStatusService,\n        private http: HttpClient\n    ) {\n\n        this.serverStatusService.fetchServerStatus().then((isRunning: boolean) => {\n            this.isRunning = isRunning;\n            this.inProgress = false;\n        });\n    }\n\n    toggleState(event: MatSlideToggleChange): void {\n        const route: string = event.checked ? \"startup\" : \"shutdown\";\n\n        this.inProgress = true;\n        this.http.get<IServerStatus>(route).subscribe((serverStatus: IServerStatus) => {\n            this.isRunning = serverStatus.isRunning;\n            this.inProgress = false;\n        });\n    }\n}","<div class=\"content-container\">\n    <mat-slide-toggle [checked]=\"isRunning\" \n        [disabled]=\"inProgress\"\n        (change)=\"toggleState($event)\">Iris</mat-slide-toggle>\n    <mat-spinner *ngIf=\"inProgress\" [diameter]=\"18\"></mat-spinner>\n</div>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { MatTableModule } from '@angular/material/table';\nimport { AppRoutingModule } from './app-routing.module';\nimport { HeatingControlComponent } from './heating-control/heating-control.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatSliderModule} from '@angular/material/slider';\nimport { FormsModule } from '@angular/forms';\nimport {MatRadioModule} from '@angular/material/radio';\nimport { TemperaturePipe } from './heating-control/temperature.pipe';\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\nimport { AppComponent } from './app.component';\nimport {MatToolbarModule} from '@angular/material/toolbar';\nimport {MatSidenavModule} from '@angular/material/sidenav';\nimport {MatListModule} from '@angular/material/list';\nimport { ServerStatusComponent } from './server-status/server-status.component';\nimport { ServerStatusService } from './server-status/server-status.service';\nimport { ServerStatusGuard } from './server-status/server-status.guard';\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    HeatingControlComponent,\n    TemperaturePipe,\n    ServerStatusComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    MatTableModule,\n    MatIconModule,\n    MatButtonModule,\n    MatSliderModule,\n    MatRadioModule,\n    FormsModule,\n    MatProgressSpinnerModule,\n    MatToolbarModule,\n    MatSidenavModule,\n    MatListModule,\n    MatSlideToggleModule\n  ],\n  providers: [ServerStatusService, ServerStatusGuard],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from \"@angular/core\";\nimport { HttpClient } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport { IServerStatus } from './server-status.model';\n\n@Injectable()\nexport class ServerStatusService {\n    isRunning = false;\n\n    constructor(private http: HttpClient) {}\n\n    fetchServerStatus(): Promise<boolean> {\n        return this.http.get<IServerStatus>(\"status\").pipe(\n            map((serverStatus: IServerStatus) => this.isRunning = serverStatus.isRunning)\n        ).toPromise();\n    }\n}","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { HeatingControlComponent } from './heating-control/heating-control.component';\nimport { ServerStatusComponent } from './server-status/server-status.component';\nimport { ServerStatusGuard } from './server-status/server-status.guard';\n\nconst routes: Routes = [\n  { \n    path: 'heating-control', \n    component: HeatingControlComponent, \n    canActivate: [\n      ServerStatusGuard\n    ]\n  },\n  { path: '**', component: ServerStatusComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes, { useHash: true })],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({name: 'temperature'})\nexport class TemperaturePipe implements PipeTransform {\n  transform(value: number|undefined): string {\n    if (value === undefined) {\n        return \"-\";\n    } else if (value === 4.5) {\n        return \"OFF\"\n    } else {\n        return `${value} °C`;\n    }\n  }\n}","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}